// components/__tests__/AdminPanel.test.js
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import AdminPanel from '../AdminPanel';
import { gameAPI } from '../../services/api';

// Mock API
import { vi } from 'vitest';

vi.mock('../../services/api', () => ({
  gameAPI: {
    listGames: vi.fn(),
    createGame: vi.fn(),
    deleteGame: vi.fn(),
    stopGame: vi.fn(),
    startGame: vi.fn(),
    resetGame: vi.fn(),
    addPlayer: vi.fn(),
    removePlayer: vi.fn(),
    movePlayer: vi.fn(),
    updateGame: vi.fn(),
  },
}));

// Test wrapper with QueryClient
const createWrapper = () => {
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: { retry: false },
      mutations: { retry: false },
    },
  });
  
  return ({ children }) => (
    <QueryClientProvider client={queryClient}>
      {children}
    </QueryClientProvider>
  );
};

describe('AdminPanel - Cache Szinkroniz√°ci√≥', () => {
  const mockGames = [
    { id: 'game1', name: 'Test Game 1', game_code: 'ABC123', created_by: 'Admin1' },
    { id: 'game2', name: 'Test Game 2', game_code: 'DEF456', created_by: 'Admin2' },
  ];

  beforeEach(() => {
    vi.clearAllMocks();
    gameAPI.listGames.mockResolvedValue(mockGames); // Return games array directly
  });

  test('AdminPanel bet√∂lti a j√°t√©kokat', async () => {
    render(<AdminPanel onBack={vi.fn()} />, { wrapper: createWrapper() });

    await waitFor(() => {
      expect(screen.getByText('Test Game 1')).toBeInTheDocument();
      expect(screen.getByText('Test Game 2')).toBeInTheDocument();
    });
  });

  test('Friss√≠t√©s gomb m≈±k√∂dik', async () => {
    render(<AdminPanel onBack={vi.fn()} />, { wrapper: createWrapper() });

    await waitFor(() => {
      expect(screen.getByText('Test Game 1')).toBeInTheDocument();
    });

    // Friss√≠t√©s gomb megnyom√°sa
    const refreshButton = screen.getByText('Friss√≠t√©s');
    fireEvent.click(refreshButton);

    // Ellen≈ërizz√ºk, hogy a listGames API-t √∫jra megh√≠vt√°k
    await waitFor(() => {
      expect(gameAPI.listGames).toHaveBeenCalledTimes(2); // Els≈ë bet√∂lt√©s + friss√≠t√©s
    });
  });

  test('J√°t√©k t√∂rl√©se cache-t friss√≠ti', async () => {
    const mockDeleteResponse = { success: true };
    gameAPI.deleteGame.mockResolvedValue(mockDeleteResponse);
    
    // Mock a t√∂rl√©s ut√°ni friss√≠tett list√°t
    const updatedGames = mockGames.filter(game => game.id !== 'game1');
    gameAPI.listGames
      .mockResolvedValueOnce(mockGames) // Els≈ë bet√∂lt√©s
      .mockResolvedValueOnce(updatedGames); // T√∂rl√©s ut√°ni friss√≠t√©s

    render(<AdminPanel onBack={vi.fn()} />, { wrapper: createWrapper() });

    await waitFor(() => {
      expect(screen.getByText('Test Game 1')).toBeInTheDocument();
    });

    // J√°t√©k t√∂rl√©se (mock confirm dialog)
    window.confirm = vi.fn(() => true);
    
    // T√∂rl√©s gomb megkeres√©se √©s megnyom√°sa (üóëÔ∏è emoji)
    const deleteButtons = screen.getAllByText('üóëÔ∏è');
    fireEvent.click(deleteButtons[0]); // Els≈ë j√°t√©k t√∂rl√©se

    await waitFor(() => {
      expect(gameAPI.deleteGame).toHaveBeenCalledWith('game1');
    });

    // Ellen≈ërizz√ºk, hogy a cache friss√ºlt
    await waitFor(() => {
      expect(screen.queryByText('Test Game 1')).not.toBeInTheDocument();
      expect(screen.getByText('Test Game 2')).toBeInTheDocument();
    });
  });

  test('J√°t√©k l√©trehoz√°sa cache-t friss√≠ti', async () => {
    const newGame = { id: 'game3', name: 'New Game', game_code: 'GHI789', created_by: 'Admin3' };
    gameAPI.createGame.mockResolvedValue(newGame);
    
    // Mock a l√©trehoz√°s ut√°ni friss√≠tett list√°t
    const updatedGames = [...mockGames, newGame];
    gameAPI.listGames
      .mockResolvedValueOnce({ games: mockGames }) // Els≈ë bet√∂lt√©s
      .mockResolvedValueOnce({ games: updatedGames }); // L√©trehoz√°s ut√°ni friss√≠t√©s

    render(<AdminPanel onBack={vi.fn()} />, { wrapper: createWrapper() });

    await waitFor(() => {
      expect(screen.getByText('Test Game 1')).toBeInTheDocument();
    });

    // √öj j√°t√©k gomb megnyom√°sa
    const newGameButton = screen.getByText('√öj j√°t√©k');
    fireEvent.click(newGameButton);

    // Admin n√©v megad√°sa
    const adminNameInput = screen.getByPlaceholderText('Admin neve');
    fireEvent.change(adminNameInput, { target: { value: 'Admin3' } });

    // J√°t√©k l√©trehoz√°sa
    const createButton = screen.getByText('J√°t√©k l√©trehoz√°sa');
    fireEvent.click(createButton);

    await waitFor(() => {
      expect(gameAPI.createGame).toHaveBeenCalledWith(
        'Halloween Kincskeres≈ë',
        'Admin3',
        4,
        2
      );
    });

    // Ellen≈ërizz√ºk, hogy a cache friss√ºlt
    await waitFor(() => {
      expect(screen.getByText('New Game')).toBeInTheDocument();
    });
  });

  test('Polling intervallum helyes', () => {
    vi.useFakeTimers();

    render(<AdminPanel onBack={vi.fn()} />, { wrapper: createWrapper() });

    // Els≈ë API h√≠v√°s
    expect(gameAPI.listGames).toHaveBeenCalledTimes(1);

    // 5 m√°sodperc eltelte ut√°n (polling interval)
    vi.advanceTimersByTime(5000);

    // Ellen≈ërizz√ºk, hogy a polling m≈±k√∂dik
    expect(gameAPI.listGames).toHaveBeenCalledTimes(2);

    vi.useRealTimers();
  });
});
