import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { describe, it, expect, vi } from 'vitest'
import Welcome from '../Welcome'

describe('Welcome Component', () => {
  const mockOnGameCodeSubmit = vi.fn()

  beforeEach(() => {
    mockOnGameCodeSubmit.mockClear()
  })

  it('renders welcome message and game code input', () => {
    render(<Welcome onGameCodeSubmit={mockOnGameCodeSubmit} />)
    
    expect(screen.getByText('Halloween Kincskeres≈ë')).toBeInTheDocument()
    expect(screen.getByText('√údv√∂z√∂lj√ºk a kalandos j√°t√©kban!')).toBeInTheDocument()
    expect(screen.getByPlaceholderText('ABC123')).toBeInTheDocument()
    expect(screen.getByText('Csatlakoz√°s a j√°t√©khoz! üéÆ')).toBeInTheDocument()
  })

  it('renders admin button', () => {
    render(<Welcome onGameCodeSubmit={mockOnGameCodeSubmit} />)
    
    expect(screen.getByText('üéõÔ∏è Vez√©rl≈ëpult')).toBeInTheDocument()
  })

  it('renders game rules', () => {
    render(<Welcome onGameCodeSubmit={mockOnGameCodeSubmit} />)
    
    expect(screen.getByText('üìã J√°t√©kszab√°lyok:')).toBeInTheDocument()
    expect(screen.getByText('4 j√°t√©kos, 2 csapat (2-2 f≈ë)')).toBeInTheDocument()
    expect(screen.getByText('El≈ësz√∂r k√ºl√∂n versenyeztek')).toBeInTheDocument()
    expect(screen.getByText('Majd egy√ºtt a k√∂z√∂s c√©l fel√©')).toBeInTheDocument()
    expect(screen.getByText('QR k√≥dokat kell megtal√°lni')).toBeInTheDocument()
    expect(screen.getByText('1 seg√≠ts√©g √°llom√°sonk√©nt')).toBeInTheDocument()
    expect(screen.getByText('3 hiba ut√°n √∫jrakezd√©s')).toBeInTheDocument()
  })

  it('handles game code input change', () => {
    render(<Welcome onGameCodeSubmit={mockOnGameCodeSubmit} />)
    
    const input = screen.getByPlaceholderText('ABC123')
    fireEvent.change(input, { target: { value: 'abc123' } })
    
    expect(input.value).toBe('ABC123') // Should be converted to uppercase
  })

  it('handles form submission with valid game code', () => {
    render(<Welcome onGameCodeSubmit={mockOnGameCodeSubmit} />)
    
    const input = screen.getByPlaceholderText('ABC123')
    const submitButton = screen.getByText('Csatlakoz√°s a j√°t√©khoz! üéÆ')
    
    fireEvent.change(input, { target: { value: 'ABC123' } })
    fireEvent.click(submitButton)
    
    expect(mockOnGameCodeSubmit).toHaveBeenCalledWith('ABC123')
  })

  it('shows error for empty game code', () => {
    render(<Welcome onGameCodeSubmit={mockOnGameCodeSubmit} />)
    
    const submitButton = screen.getByText('Csatlakoz√°s a j√°t√©khoz! üéÆ')
    fireEvent.click(submitButton)
    
    expect(screen.getByText('Add meg a j√°t√©k k√≥dot!')).toBeInTheDocument()
    expect(mockOnGameCodeSubmit).not.toHaveBeenCalled()
  })

  it('shows error for whitespace-only game code', () => {
    render(<Welcome onGameCodeSubmit={mockOnGameCodeSubmit} />)
    
    const input = screen.getByPlaceholderText('ABC123')
    const submitButton = screen.getByText('Csatlakoz√°s a j√°t√©khoz! üéÆ')
    
    fireEvent.change(input, { target: { value: '   ' } })
    fireEvent.click(submitButton)
    
    expect(screen.getByText('Add meg a j√°t√©k k√≥dot!')).toBeInTheDocument()
    expect(mockOnGameCodeSubmit).not.toHaveBeenCalled()
  })

  it('trims whitespace from game code', () => {
    render(<Welcome onGameCodeSubmit={mockOnGameCodeSubmit} />)
    
    const input = screen.getByPlaceholderText('ABC123')
    const submitButton = screen.getByText('Csatlakoz√°s a j√°t√©khoz! üéÆ')
    
    fireEvent.change(input, { target: { value: '  abc123  ' } })
    fireEvent.click(submitButton)
    
    expect(mockOnGameCodeSubmit).toHaveBeenCalledWith('ABC123')
  })

  it('handles admin button click', () => {
    render(<Welcome onGameCodeSubmit={mockOnGameCodeSubmit} />)
    
    const adminButton = screen.getByText('üéõÔ∏è Vez√©rl≈ëpult')
    fireEvent.click(adminButton)
    
    expect(mockOnGameCodeSubmit).toHaveBeenCalledWith('ADMIN')
  })

  it('limits input to 6 characters', () => {
    render(<Welcome onGameCodeSubmit={mockOnGameCodeSubmit} />)
    
    const input = screen.getByPlaceholderText('ABC123')
    expect(input).toHaveAttribute('maxLength', '6')
  })

  it('has autofocus on input', () => {
    render(<Welcome onGameCodeSubmit={mockOnGameCodeSubmit} />)
    
    const input = screen.getByPlaceholderText('ABC123')
    expect(input).toHaveAttribute('autofocus')
  })

  it('clears error when submitting valid code after error', () => {
    render(<Welcome onGameCodeSubmit={mockOnGameCodeSubmit} />)
    
    const input = screen.getByPlaceholderText('ABC123')
    const submitButton = screen.getByText('Csatlakoz√°s a j√°t√©khoz! üéÆ')
    
    // First submit empty to show error
    fireEvent.click(submitButton)
    expect(screen.getByText('Add meg a j√°t√©k k√≥dot!')).toBeInTheDocument()
    
    // Then submit valid code
    fireEvent.change(input, { target: { value: 'ABC123' } })
    fireEvent.click(submitButton)
    
    expect(screen.queryByText('Add meg a j√°t√©k k√≥dot!')).not.toBeInTheDocument()
    expect(mockOnGameCodeSubmit).toHaveBeenCalledWith('ABC123')
  })
})
