// components/ChallengePanel.jsx
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import QRScanner from './QRScanner';
import { useCurrentChallenge, useValidateQR, useGetHelp } from '../hooks/useGameAPI';
import useTypewriter from '../hooks/useTypewriter';

const ChallengePanel = ({ gameId, teamName, gameStatus }) => {
  const [qrCode, setQrCode] = useState('');
  const [showHelp, setShowHelp] = useState(false);
  const [helpText, setHelpText] = useState('');
  const [scanResult, setScanResult] = useState(null);
  const [showQRScanner, setShowQRScanner] = useState(false);

  // React Query hooks
  const { data: challenge, isLoading: challengeLoading, error: challengeError, refetch: refetchChallenge } = useCurrentChallenge(
    gameId, 
    teamName,
    { 
      enabled: !!gameId && !!teamName && (gameStatus === 'separate' || gameStatus === 'together')
    }
  );
  const validateQRMutation = useValidateQR();
  const getHelpMutation = useGetHelp();

  // Typewriter effect for challenge description
  const challengeDescription = challenge?.challenge?.description || challenge?.description || '';
  const { displayedText: typewriterText, isTyping } = useTypewriter(challengeDescription, 30, !!challenge);

  // ‚úÖ JAV√çTOTT: ScanResult t√∂rl√©se √∫j challenge bet√∂lt√©sekor
  useEffect(() => {
    if (challenge) {
      setScanResult(null); // T√∂r√∂lj√ºk a kor√°bbi eredm√©nyt √∫j feladat bet√∂lt√©sekor
    }
  }, [challenge]);

  // QR k√≥d bek√ºld√©se - EGYSZER≈∞S√çTETT verzi√≥
  const handleQRSubmit = async (e) => {
    e.preventDefault();
    if (!qrCode.trim()) return;

    setScanResult(null);
    try {
      const result = await validateQRMutation.mutateAsync({
        gameId,
        teamName,
        qrCode: qrCode.trim()
      });
      
      setScanResult({
        success: result.success,
        message: result.message,
        bonus: result.bonus,
        gameFinished: result.game_finished,
        reset: result.reset
      });
      
      // ‚úÖ CSAK QR k√≥d t√∂rl√©se - cache automatikusan friss√ºl
      if (result.success || result.reset) {
        setQrCode('');
        // ‚ùå NINCS MANU√ÅLIS REFETCH - cache automatikusan friss√ºl!
      }
    } catch (err) {
      setScanResult({
        success: false,
        message: err.message || 'Hiba a QR k√≥d ellen≈ërz√©sekor'
      });
    }
  };

  // QR k√≥d scanner kezel√©se - EGYSZER≈∞S√çTETT verzi√≥
  const handleQRScan = async (scannedCode) => {
    setShowQRScanner(false);
    setQrCode(scannedCode);
    
    // Automatikusan bek√ºldj√ºk a beolvasott k√≥dot
    setScanResult(null);
    try {
      const result = await validateQRMutation.mutateAsync({
        gameId,
        teamName,
        qrCode: scannedCode
      });
      
      setScanResult({
        success: result.success,
        message: result.message,
        bonus: result.bonus,
        gameFinished: result.game_finished,
        reset: result.reset
      });
      
      // ‚úÖ CSAK QR k√≥d t√∂rl√©se - cache automatikusan friss√ºl
      if (result.success || result.reset) {
        setQrCode('');
        // ‚ùå NINCS MANU√ÅLIS REFETCH - cache automatikusan friss√ºl!
      }
    } catch (err) {
      setScanResult({
        success: false,
        message: err.message || 'Hiba a QR k√≥d ellen≈ërz√©sekor'
      });
    }
  };

  // Seg√≠ts√©g k√©r√©se
  const handleGetHelpClick = async () => {
    try {
      const helpData = await getHelpMutation.mutateAsync({
        gameId,
        teamName
      });
      
      if (helpData && helpData.success !== false) {
        setHelpText(helpData.help_text || '');
        setShowHelp(true);
      } else {
        console.error('Seg√≠ts√©g k√©r√©s sikertelen:', helpData);
      }
    } catch (error) {
      console.error('Hiba a seg√≠ts√©g k√©r√©sekor:', error);
    }
  };

  // Loading √°llapot
  if (challengeLoading) {
    return (
      <div className="bg-gradient-to-b from-purple-900/90 to-gray-800/90 backdrop-blur-sm rounded-2xl shadow-lg p-mobile text-center border border-orange-500/20">
        <div className="text-3xl sm:text-4xl mb-4 animate-spin">‚è≥</div>
        <h3 className="text-xl sm:text-2xl font-bold text-orange-400 mb-2 font-spooky drop-shadow-glow-orange">
          Feladat bet√∂lt√©se...
        </h3>
        <p className="text-gray-200 font-spooky leading-relaxed text-sm sm:text-base">
          K√©rj√ºk v√°rjon, am√≠g bet√∂ltj√ºk a feladatot.
        </p>
      </div>
    );
  }

  // Error √°llapot
  if (challengeError) {
    return (
      <div className="bg-gradient-to-b from-purple-900/90 to-gray-800/90 backdrop-blur-sm rounded-2xl shadow-lg p-mobile text-center border border-orange-500/20">
        <div className="text-3xl sm:text-4xl mb-4">‚ùå</div>
        <h3 className="text-xl sm:text-2xl font-bold text-red-400 mb-2 font-spooky drop-shadow-glow-orange">
          Hiba t√∂rt√©nt
        </h3>
        <p className="text-gray-200 font-spooky leading-relaxed text-sm sm:text-base">
          {challengeError.message || 'Hiba a feladat bet√∂lt√©s√©ben'}
        </p>
      </div>
    );
  }

  // Ha nincs akt√≠v feladat
  if (!challenge) {
    return (
      <div className="bg-gradient-to-b from-purple-900/90 to-gray-800/90 backdrop-blur-sm rounded-2xl shadow-lg p-mobile text-center border border-orange-500/20">
        <div className="text-3xl sm:text-4xl mb-4 animate-float">‚è≥</div>
        <h3 className="text-xl sm:text-2xl font-bold text-orange-400 mb-2 font-spooky drop-shadow-glow-orange">
          V√°rakoz√°s...
        </h3>
        <p className="text-gray-200 font-spooky leading-relaxed text-sm sm:text-base">
          {gameStatus === 'setup' ? 'V√°rakoz√°s a j√°t√©k ind√≠t√°s√°ra... (Admin ind√≠tja el)' : 
           gameStatus === 'waiting' ? 'V√°rakoz√°s j√°t√©kosokra... (Legal√°bb 1 j√°t√©kos sz√ºks√©ges)' :
           'V√°rakoz√°s a feladatra...'}
        </p>
        {gameStatus === 'setup' && (
          <div className="mt-mobile p-mobile bg-gradient-to-b from-orange-900/30 to-orange-800/30 rounded-xl border border-orange-500/20">
            <p className="text-sm text-orange-200 font-spooky">
              üí° Tipp: Oszd meg a j√°t√©k azonos√≠t√≥j√°t a t√∂bbi j√°t√©kossal!
            </p>
          </div>
        )}
        {gameStatus === 'waiting' && (
          <div className="mt-mobile p-mobile bg-gradient-to-b from-blue-900/30 to-blue-800/30 rounded-xl border border-blue-500/20">
            <p className="text-sm text-blue-200 font-spooky">
              üéÆ V√°rjuk a t√∂bbi j√°t√©kos csatlakoz√°s√°t...
            </p>
            <p className="text-xs text-blue-300 mt-2 font-spooky">
              A j√°t√©k automatikusan setup √°llapotba ker√ºl, amikor legal√°bb 1 j√°t√©kos csatlakozik!
            </p>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="bg-gradient-to-b from-purple-900/90 to-gray-800/90 backdrop-blur-sm rounded-2xl shadow-lg p-mobile border border-orange-500/20 overflow-hidden">
      {/* Feladat fejl√©c */}
      <div className="text-center mb-mobile">
        <div className="text-4xl sm:text-6xl mb-4 animate-float">{challenge.station?.icon || 'üéØ'}</div>
        <h2 className="text-2xl sm:text-3xl md:text-4xl font-extrabold text-orange-400 mb-3 font-spooky drop-shadow-glow-orange">
          {challenge.challenge?.title || challenge.title}
        </h2>
        <div className="text-base sm:text-lg text-gray-200 mb-2 font-spooky">
          {challenge.station?.name}
        </div>
        <div className="text-xs sm:text-sm text-purple-300 bg-gradient-to-b from-purple-900/30 to-purple-800/30 rounded-full px-3 sm:px-4 py-2 inline-block border border-purple-500/20 font-spooky">
          {challenge.is_save ? 'üÜò Mentes√≠t≈ë feladat' :
           challenge.team_type ? 
            (challenge.team_type === 'pumpkin' ? 'üéÉ T√∂k Csapat feladata' : 'üëª Szellem Csapat feladata') : 
            'ü§ù K√∂z√∂s feladat'
          }
        </div>
      </div>

      {/* Feladat le√≠r√°sa */}
      <div className="mb-mobile">
        <h3 className="text-lg sm:text-xl font-bold text-orange-300 mb-mobile font-spooky">
          üìã Feladat:
        </h3>
        <div className="bg-gradient-to-b from-gray-800 to-gray-700 rounded-xl p-mobile border border-orange-500/20">
          <p className="text-gray-200 leading-relaxed font-spooky text-sm sm:text-base">
            {typewriterText}
            {isTyping && <span className="animate-pulse text-orange-400">|</span>}
          </p>
        </div>
      </div>

      {/* QR k√≥d beolvas√°s */}
      <div className="mb-mobile">
        <h3 className="text-lg sm:text-xl font-bold text-orange-300 mb-mobile font-spooky">
          üì± QR k√≥d beolvas√°sa:
        </h3>
        <form onSubmit={handleQRSubmit} className="form-container">
          <div>
            <input
              type="text"
              value={qrCode}
              onChange={(e) => setQrCode(e.target.value)}
              placeholder="√çrd be vagy olvasd be a QR k√≥dot..."
              className="input-primary text-center"
              disabled={validateQRMutation.isPending}
            />
          </div>
          <div className="flex-mobile-row">
            <button
              type="submit"
              disabled={validateQRMutation.isPending || !qrCode.trim()}
              className="btn-primary flex-1"
            >
              {validateQRMutation.isPending ? (
                <span className="flex items-center justify-center">
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Ellen≈ërz√©s...
                </span>
              ) : (
                'QR k√≥d ellen≈ërz√©se üîç'
              )}
            </button>
            <button
              type="button"
              onClick={() => setShowQRScanner(true)}
              disabled={validateQRMutation.isPending}
              className="btn-small"
              title="QR k√≥d beolvas√°sa kamer√°val"
            >
              üì∑
            </button>
          </div>
        </form>
      </div>

      {/* Eredm√©ny megjelen√≠t√©se */}
      {scanResult && (
        <div className={`mb-mobile p-mobile rounded-xl text-center font-spooky ${
          scanResult.success ? 'bg-gradient-to-b from-green-600/80 to-green-700/80' : 'bg-gradient-to-b from-red-600/80 to-red-700/80'
        } text-white border-2 ${
          scanResult.success ? 'border-green-400' : 'border-red-400'
        }`}>
          <div className="text-xl sm:text-2xl mb-2">
            {scanResult.success ? '‚úÖ' : '‚ùå'}
          </div>
          <div className="font-bold text-base sm:text-lg">
            {scanResult.message}
          </div>
          {scanResult.bonus && (
            <div className="text-sm mt-2 text-yellow-200">
              üéâ B√≥nusz pont!
            </div>
          )}
          {scanResult.gameFinished && (
            <div className="text-sm mt-2 text-yellow-200">
              üèÜ J√°t√©k befejezve!
            </div>
          )}
          {scanResult.reset && (
            <div className="text-sm mt-2 text-orange-200">
              ‚ö†Ô∏è T√∫l sok hiba! √öjrakezd√©s...
            </div>
          )}
        </div>
      )}

      {/* Seg√≠ts√©g */}
      <div className="mb-mobile">
        <div className="flex items-center justify-between mb-mobile">
          <h3 className="text-lg sm:text-xl font-bold text-orange-300 font-spooky">
            üí° Seg√≠ts√©g:
          </h3>
          <button
            onClick={handleGetHelpClick}
            disabled={getHelpMutation.isPending}
            className="btn-small"
          >
            {getHelpMutation.isPending ? 'K√©r√©s...' : 'Seg√≠ts√©g k√©r√©se'}
          </button>
        </div>
        
        {showHelp && helpText && (
          <div className="bg-gradient-to-b from-purple-900/50 to-purple-800/50 rounded-xl p-mobile border border-purple-500/20">
            <p className="text-purple-200 leading-relaxed font-spooky text-sm sm:text-base">
              {helpText}
            </p>
          </div>
        )}
      </div>

      {/* J√°t√©kszab√°lyok */}
      <div className="bg-gradient-to-b from-gray-800 to-gray-700 rounded-xl p-mobile border border-orange-500/20">
        <h4 className="font-bold text-orange-300 mb-mobile text-base sm:text-lg font-spooky">üìã Eml√©keztet≈ë:</h4>
        <ul className="text-xs sm:text-sm text-gray-200 space-y-1 sm:space-y-2 font-spooky leading-relaxed">
          <li className="flex items-center">
            <span className="text-orange-400 mr-2 text-sm">‚ö†Ô∏è</span>
            3 hib√°s pr√≥b√°lkoz√°s ut√°n √∫jrakezd√©s
          </li>
          <li className="flex items-center">
            <span className="text-orange-400 mr-2 text-sm">ü™Ñ</span>
            1 seg√≠ts√©g √°llom√°sonk√©nt
          </li>
          <li className="flex items-center">
            <span className="text-orange-400 mr-2 text-sm">üì±</span>
            QR k√≥dot pontosan add meg
          </li>
          <li className="flex items-center">
            <span className="text-orange-400 mr-2 text-sm">üí°</span>
            Ha elakadsz, k√©rj seg√≠ts√©get!
          </li>
        </ul>
      </div>

      {/* QR Scanner Modal */}
      <QRScanner
        isOpen={showQRScanner}
        onScan={handleQRScan}
        onClose={() => setShowQRScanner(false)}
      />
    </div>
  );
};

ChallengePanel.propTypes = {
  gameId: PropTypes.number.isRequired,
  teamName: PropTypes.string.isRequired,
  gameStatus: PropTypes.string,
};

export default ChallengePanel;
