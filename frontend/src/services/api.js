// services/api.js
const API_BASE_URL = 'http://localhost:8000';

class APIError extends Error {
  constructor(message, status) {
    super(message);
    this.name = 'APIError';
    this.status = status;
  }
}

const apiRequest = async (endpoint, options = {}) => {
  try {
    const url = `${API_BASE_URL}${endpoint}`;
    const config = {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    };

    if (config.body && typeof config.body === 'object') {
      config.body = JSON.stringify(config.body);
    }

    const response = await fetch(url, config);
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new APIError(
        errorData.error || `HTTP error! status: ${response.status}`,
        response.status
      );
    }

    return await response.json();
  } catch (error) {
    if (error instanceof APIError) {
      throw error;
    }
    throw new APIError('H√°l√≥zati hiba', 0);
  }
};

export const gameAPI = {
  // √öj j√°t√©k l√©trehoz√°sa
  createGame: async (gameName = 'Halloween Kincskeres≈ë') => {
    return apiRequest('/api/game/create/', {
      method: 'POST',
      body: { name: gameName }
    });
  },

  // J√°t√©kos csatlakoz√°s
  joinGame: async (gameId, playerName, teamName) => {
    return apiRequest(`/api/game/${gameId}/join/`, {
      method: 'POST',
      body: {
        name: playerName,
        team: teamName
      }
    });
  },

  // J√°t√©k √°llapot lek√©rdez√©se
  getGameStatus: async (gameId) => {
    return apiRequest(`/api/game/${gameId}/status/`);
  },

  // Aktu√°lis feladat lek√©rdez√©se
  getCurrentChallenge: async (gameId, teamName) => {
    return apiRequest(`/api/game/${gameId}/team/${teamName}/challenge/`);
  },

  // QR k√≥d valid√°l√°sa
  validateQR: async (gameId, teamName, qrCode) => {
    return apiRequest(`/api/game/${gameId}/team/${teamName}/validate/`, {
      method: 'POST',
      body: { qr_code: qrCode }
    });
  },

  // Seg√≠ts√©g k√©r√©se
  getHelp: async (gameId, teamName) => {
    return apiRequest(`/api/game/${gameId}/team/${teamName}/help/`, {
      method: 'POST'
    });
  }
};

// Utility f√ºggv√©nyek
export const utils = {
  // Csapat n√©v form√°z√°sa
  formatTeamName: (teamName) => {
    const teamNames = {
      'pumpkin': 'üéÉ T√∂k Csapat',
      'ghost': 'üëª Szellem Csapat'
    };
    return teamNames[teamName] || teamName;
  },

  // √Ållom√°s ikon lek√©rdez√©se
  getStationIcon: (stationNumber) => {
    const icons = {
      1: 'üéÉ',
      2: 'üëª', 
      3: 'üï∑Ô∏è',
      4: 'ü¶á',
      5: 'üíÄ',
      6: 'üßô‚Äç‚ôÄÔ∏è'
    };
    return icons[stationNumber] || '‚ùì';
  },

  // J√°t√©k f√°zis sz√∂vege
  getPhaseText: (status) => {
    const phases = {
      'setup': 'V√°rakoz√°s j√°t√©kosokra...',
      'separate': 'K√ºl√∂n f√°zis - versenyz√©s!',
      'together': 'K√∂z√∂s f√°zis - egy√ºttm≈±k√∂d√©s!',
      'finished': 'J√°t√©k befejezve!'
    };
    return phases[status] || status;
  }
};