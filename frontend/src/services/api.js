// services/api.js
// Dinamikus API URL - ngrok haszn√°lat√°hoz
const getApiBaseUrl = () => {
  // Ha ngrok URL van a localStorage-ban, haszn√°ld azt
  const ngrokUrl = localStorage.getItem('ngrok_url');
  if (ngrokUrl) {
    return ngrokUrl;
  }
  
  // Ha a frontend √©s backend ugyanazon a porton fut (production build),
  // haszn√°lj relat√≠v URL-eket
  if (window.location.hostname === '127.0.0.1' && window.location.port === '8000') {
    return ''; // Relat√≠v URL-ek haszn√°lata
  }
  
  // Egy√©bk√©nt haszn√°ld a jelenlegi domain-t (build m√≥dban)
  if (window.location.hostname !== 'localhost') {
    return window.location.origin;
  }
  
  // Fejleszt√©si m√≥dban localhost
  return 'http://127.0.0.1:8000';
};

const API_BASE_URL = getApiBaseUrl();


class APIError extends Error {
  constructor(message, status) {
    super(message);
    this.name = 'APIError';
    this.status = status;
  }
}

const apiRequest = async (endpoint, options = {}) => {
  try {
    const url = `${API_BASE_URL}${endpoint}`;
    const config = {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    };

    if (config.body && typeof config.body === 'object') {
      config.body = JSON.stringify(config.body);
    }

    const response = await fetch(url, config);
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new APIError(
        errorData.error || `HTTP error! status: ${response.status}`,
        response.status
      );
    }

    return await response.json();
  } catch (error) {
    if (error instanceof APIError) {
      throw error;
    }
    throw new APIError('H√°l√≥zati hiba', 0);
  }
};

export const gameAPI = {
  // J√°t√©k keres√©se k√≥d alapj√°n
  findGameByCode: async (gameCode) => {
    return apiRequest(`/api/game/code/${gameCode.toUpperCase()}/`);
  },


  // √öj j√°t√©k l√©trehoz√°sa (Admin)
  createGame: async (gameName = 'Halloween Kincskeres≈ë', adminName = 'Admin', maxPlayers = 4, teamCount = 2) => {
    return apiRequest('/api/game/create/', {
      method: 'POST',
      body: { 
        name: gameName, 
        admin_name: adminName,
        max_players: maxPlayers,
        team_count: teamCount
      }
    });
  },

  // J√°t√©k ind√≠t√°sa (Admin)
  startGame: async (gameId) => {
    return apiRequest(`/api/game/${gameId}/start/`, {
      method: 'POST'
    });
  },

  // J√°t√©k vissza√°ll√≠t√°sa
  resetGame: async (gameId) => {
    return apiRequest(`/api/game/${gameId}/reset/`, {
      method: 'DELETE'
    });
  },

  // J√°t√©kos csatlakoz√°s
  joinGame: async (gameId, playerName, teamName) => {
    return apiRequest(`/api/game/${gameId}/join/`, {
      method: 'POST',
      body: {
        name: playerName,
        team: teamName
      }
    });
  },

  // J√°t√©k √°llapot lek√©rdez√©se
  getGameStatus: async (gameId) => {
    return apiRequest(`/api/game/${gameId}/status/`);
  },

  // Aktu√°lis feladat lek√©rdez√©se
  getCurrentChallenge: async (gameId, teamName) => {
    return apiRequest(`/api/game/${gameId}/team/${teamName}/challenge/`);
  },

  // QR k√≥d valid√°l√°sa
  validateQR: async (gameId, teamName, qrCode) => {
    return apiRequest(`/api/game/${gameId}/team/${teamName}/validate/`, {
      method: 'POST',
      body: { qr_code: qrCode }
    });
  },

  // Seg√≠ts√©g k√©r√©se
  getHelp: async (gameId, teamName) => {
    return apiRequest(`/api/game/${gameId}/team/${teamName}/help/`, {
      method: 'POST'
    });
  },

  // J√°t√©kos poz√≠ci√≥ lek√©rdez√©se
  getPlayerStatus: async () => {
    return apiRequest('/api/player/status/');
  },

  // J√°t√©kos session ellen≈ërz√©se
  checkPlayerSession: async () => {
    return apiRequest('/api/player/check-session/', {
      method: 'POST'
    });
  },

  // J√°t√©kos kil√©p√©se a j√°t√©kb√≥l
  exitGame: async () => {
    const sessionToken = localStorage.getItem('session_token');
    return apiRequest('/api/player/exit/', {
      method: 'POST',
      body: { session_token: sessionToken }
    });
  },

  // Session token alap√∫ visszacsatlakoz√°s
  restoreSession: async (sessionToken) => {
    return apiRequest('/api/player/restore-session/', {
      method: 'POST',
      body: { session_token: sessionToken }
    });
  },

  // J√°t√©kos kijelentkez√©se (session token √©rv√©nytelen√≠t√©se)
  logoutPlayer: async () => {
    const sessionToken = localStorage.getItem('session_token');
    return apiRequest('/api/player/logout/', {
      method: 'POST',
      body: { session_token: sessionToken }
    });
  },

  // Admin funkci√≥k
  // √ñsszes j√°t√©k list√°z√°sa
  listGames: async () => {
    return apiRequest('/api/admin/games/');
  },

  // J√°t√©k szerkeszt√©se
  updateGame: async (gameId, gameData) => {
    return apiRequest(`/api/game/${gameId}/update/`, {
      method: 'PUT',
      body: gameData
    });
  },

  // J√°t√©k t√∂rl√©se
  deleteGame: async (gameId) => {
    return apiRequest(`/api/game/${gameId}/delete/`, {
      method: 'DELETE'
    });
  },

  // J√°t√©k le√°ll√≠t√°sa
  stopGame: async (gameId) => {
    return apiRequest(`/api/game/${gameId}/stop/`, {
      method: 'POST'
    });
  },

  // J√°t√©kos kezel√©s
  // J√°t√©kos elt√°vol√≠t√°sa
  removePlayer: async (gameId, playerId) => {
    return apiRequest(`/api/game/${gameId}/player/${playerId}/remove/`, {
      method: 'DELETE'
    });
  },

  // J√°t√©kos √°thelyez√©se
  movePlayer: async (gameId, playerId, newTeam) => {
    return apiRequest(`/api/game/${gameId}/player/${playerId}/move/`, {
      method: 'POST',
      body: { new_team: newTeam }
    });
  },

  // J√°t√©kos hozz√°ad√°sa
  addPlayer: async (gameId, playerName, teamName) => {
    return apiRequest(`/api/game/${gameId}/player/add/`, {
      method: 'POST',
      body: { name: playerName, team: teamName }
    });
  }
};

// Utility f√ºggv√©nyek
export const utils = {
  // Csapat n√©v form√°z√°sa
  formatTeamName: (teamName) => {
    const teamNames = {
      'pumpkin': 'üéÉ T√∂k Csapat',
      'ghost': 'üëª Szellem Csapat'
    };
    return teamNames[teamName] || teamName;
  },

  // √Ållom√°s ikon lek√©rdez√©se
  getStationIcon: (stationNumber) => {
    const icons = {
      1: 'üéÉ',
      2: 'üëª', 
      3: 'üï∑Ô∏è',
      4: 'ü¶á',
      5: 'üíÄ',
      6: 'üßô‚Äç‚ôÄÔ∏è'
    };
    return icons[stationNumber] || '‚ùì';
  },

  // J√°t√©k f√°zis sz√∂vege
  getPhaseText: (status) => {
    const phases = {
      'setup': 'V√°rakoz√°s j√°t√©kosokra...',
      'separate': 'K√ºl√∂n f√°zis - versenyz√©s!',
      'together': 'K√∂z√∂s f√°zis - egy√ºttm≈±k√∂d√©s!',
      'finished': 'J√°t√©k befejezve!'
    };
    return phases[status] || status;
  }
};