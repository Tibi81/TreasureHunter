# models.py
from django.db import models
import uuid
import json
class Game(models.Model):
    # Egy adott kincskeres≈ë j√°t√©kot reprezent√°l.
    GAME_STATUS_CHOICES = [
        ('waiting', 'V√°rakoz√°s j√°t√©kosokra'),
        ('setup', 'Be√°ll√≠t√°s'),
        ('separate', 'K√ºl√∂n F√°zis'),
        ('together', 'K√∂z√∂s F√°zis'),
        ('finished', 'Befejezve'),
    ]
    
    MAX_PLAYER_CHOICES = [
        (1, '1 j√°t√©kos'),
        (2, '2 j√°t√©kos'),
        (3, '3 j√°t√©kos'),
        (4, '4 j√°t√©kos'),
        (5, '5 j√°t√©kos'),
        (6, '6 j√°t√©kos'),
        (7, '7 j√°t√©kos'),
        (8, '8 j√°t√©kos'),
    ]
    
    TEAM_COUNT_CHOICES = [
        (1, '1 csapat'),
        (2, '2 csapat'),
    ]
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)  # Egyedi azonos√≠t√≥ minden j√°t√©khoz
    game_code = models.CharField(max_length=8, unique=True, db_index=True, help_text="R√∂vid azonos√≠t√≥ a j√°t√©khoz csatlakoz√°shoz")  # J√°t√©k k√≥d, amivel csatlakozni lehet
    name = models.CharField(max_length=100, default="Halloween Kincskeres≈ë")  # J√°t√©k neve
    status = models.CharField(max_length=20, choices=GAME_STATUS_CHOICES, default='waiting', db_index=True)  # J√°t√©k aktu√°lis √°llapota
    meeting_station = models.IntegerField(default=5)  # Tal√°lkoz√°si pont (√°llom√°s sorsz√°ma)
    created_at = models.DateTimeField(auto_now_add=True, db_index=True)  # L√©trehoz√°s ideje
    created_by = models.CharField(max_length=100, null=True, blank=True, help_text="Admin neve aki l√©trehozta")  # Admin neve, aki l√©trehozta a j√°t√©kot
    
    # √öj mez≈ëk a rugalmass√°ghoz
    max_players = models.PositiveIntegerField(
        default=4, 
        choices=MAX_PLAYER_CHOICES,
        help_text="Maximum j√°t√©kosok sz√°ma"
    )
    team_count = models.PositiveIntegerField(
        default=2, 
        choices=TEAM_COUNT_CHOICES,
        help_text="Csapatok sz√°ma"
    )
    
    def __str__(self):
        return "J√°t√©k - {} ({})".format(self.name, self.status)
    
    @property
    def players_per_team(self):
        """J√°t√©kosok sz√°ma csapatonk√©nt"""
        if self.team_count == 1:
            return self.max_players
        else:
            return self.max_players // 2
    
    def save(self, *args, **kwargs):
        if not self.game_code:
            self.game_code = self.generate_game_code()
        super().save(*args, **kwargs)
    
    @staticmethod
    def generate_game_code():
        """Egyedi j√°t√©k k√≥d gener√°l√°sa"""
        import random
        import string
        
        while True:
            # 6 karakteres k√≥d gener√°l√°sa (bet≈±k √©s sz√°mok)
            code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
            if not Game.objects.filter(game_code=code).exists():
                return code

class Team(models.Model):
    # Egy csapatot reprezent√°l egy adott j√°t√©kban (pl. T√∂k vagy Szellem csapat).
    TEAM_CHOICES = [
        ('pumpkin', 'üéÉ T√∂k Csapat'),
        ('ghost', 'üëª Szellem Csapat'),
        ('main', 'üéÆ F≈ëcsapat'),
    ]
    
    game = models.ForeignKey(Game, on_delete=models.CASCADE, related_name='teams', db_index=True)  # Melyik j√°t√©khoz tartozik a csapat
    name = models.CharField(max_length=20, choices=TEAM_CHOICES, db_index=True)  # Csapat t√≠pusa/neve
    current_station = models.IntegerField(default=1, db_index=True)  # Jelenlegi √°llom√°s sorsz√°ma
    attempts = models.IntegerField(default=0)  # Hib√°s pr√≥b√°lkoz√°sok sz√°ma az aktu√°lis √°llom√°son
    help_used = models.BooleanField(default=False)  # Haszn√°ltak-e seg√≠ts√©get az aktu√°lis √°llom√°son
    completed_at = models.DateTimeField(null=True, blank=True, db_index=True)  # Mikor √©rt c√©lba a csapat (tal√°lkoz√°si pont)
    separate_phase_save_used = models.BooleanField(default=False)  # Haszn√°lt√°k-e a mentes√≠t≈ë feladatot a k√ºl√∂n f√°zisban
    together_phase_save_used = models.BooleanField(default=False)  # Haszn√°lt√°k-e a mentes√≠t≈ë feladatot a k√∂z√∂s f√°zisban
    
    # √öj mez≈ë a rugalmass√°ghoz
    max_players = models.PositiveIntegerField(
        default=2,
        help_text="Maximum j√°t√©kosok sz√°ma ebben a csapatban"
    )
    
    def __str__(self):
        return "{} - √Ållom√°s {}".format(self.get_name_display(), self.current_station)

class Player(models.Model):
    # Egy j√°t√©kost reprezent√°l, aki egy csapat tagja.
    team = models.ForeignKey(Team, on_delete=models.CASCADE, related_name='players', db_index=True)  # Melyik csapatban van a j√°t√©kos
    name = models.CharField(max_length=50, db_index=True)  # J√°t√©kos neve
    joined_at = models.DateTimeField(auto_now_add=True, db_index=True)  # Bel√©p√©s ideje
    session_token = models.CharField(max_length=64, null=True, blank=True, unique=True, db_index=True)  # Session token a j√°t√©kos azonos√≠t√°s√°hoz
    token_created_at = models.DateTimeField(null=True, blank=True, db_index=True)  # Mikor lett a token l√©trehozva
    is_active = models.BooleanField(default=True, db_index=True)  # Akt√≠v-e a j√°t√©kos (kil√©p√©s sz√ºneteltet√©shez)
    
    def __str__(self):
        return "{} ({})".format(self.name, self.team.get_name_display())

class Station(models.Model):
    # Egy √°llom√°st (helysz√≠nt) reprezent√°l a j√°t√©kban.
    PHASE_CHOICES = [
        ('separate', 'K√ºl√∂n F√°zis'),
        ('together', 'K√∂z√∂s F√°zis'),
        ('meeting', 'Tal√°lkoz√°si Pont'),
        ('save', 'Mentes√≠t≈ë F√°zis'),
    ]
    
    number = models.IntegerField(unique=True, db_index=True)  # √Ållom√°s sorsz√°ma
    name = models.CharField(max_length=50)  # √Ållom√°s neve
    icon = models.CharField(max_length=10)  # √Ållom√°s ikonja (emoji)
    phase = models.CharField(max_length=20, choices=PHASE_CHOICES, db_index=True)  # Melyik f√°zisban van az √°llom√°s (k√ºl√∂n/k√∂z√∂s)
    
    class Meta:
        ordering = ['number']
    
    def __str__(self):
        return "{}. {} {}".format(self.number, self.name, self.icon)

class Challenge(models.Model):
    # Egy feladatot (kih√≠v√°st) reprezent√°l egy adott √°llom√°son.
    TEAM_TYPE_CHOICES = [
        ('pumpkin', 'üéÉ T√∂k Csapat'),
        ('ghost', 'üëª Szellem Csapat'),
        ('both', 'ü§ù Mindk√©t Csapat'),
        (None, 'K√∂z√∂s Feladat'),
    ]
    
    station = models.ForeignKey(Station, on_delete=models.CASCADE, related_name='challenges', db_index=True)  # Melyik √°llom√°shoz tartozik a feladat
    team_type = models.CharField(max_length=20, choices=TEAM_TYPE_CHOICES, null=True, blank=True, db_index=True)  # Melyik csapatnak sz√≥l (ha None, akkor k√∂z√∂s)
    title = models.CharField(max_length=200)  # Feladat c√≠me
    description = models.TextField()  # Feladat le√≠r√°sa
    qr_code = models.CharField(max_length=100, unique=True, db_index=True)  # Feladathoz tartoz√≥ QR k√≥d
    help_text = models.TextField()  # Seg√≠ts√©g sz√∂vege a feladathoz
    
    def __str__(self):
        team_str = " ({})".format(self.get_team_type_display()) if self.team_type else " (K√∂z√∂s)"
        return "{}{}: {}".format(self.station.name, team_str, self.title)

class GameProgress(models.Model):
    # Egy csapat el≈ërehalad√°s√°t r√∂gz√≠ti egy adott √°llom√°son, egy adott j√°t√©kban.
    game = models.ForeignKey(Game, on_delete=models.CASCADE, db_index=True)  # Melyik j√°t√©kban t√∂rt√©nt az el≈ërehalad√°s
    team = models.ForeignKey(Team, on_delete=models.CASCADE, db_index=True)  # Melyik csapatr√≥l van sz√≥
    station = models.ForeignKey(Station, on_delete=models.CASCADE, db_index=True)  # Melyik √°llom√°sr√≥l van sz√≥
    completed_at = models.DateTimeField(auto_now_add=True, db_index=True)  # Mikor teljes√≠tett√©k az √°llom√°st
    attempts_made = models.IntegerField(default=1)  # H√°ny pr√≥b√°lkoz√°sb√≥l siker√ºlt
    help_used = models.BooleanField(default=False)  # Haszn√°ltak-e seg√≠ts√©get
    
    class Meta:
        unique_together = ['game', 'team', 'station']  # Egy csapat egy √°llom√°st egy j√°t√©kban csak egyszer teljes√≠thet
    
    def __str__(self):
        return "{} - {} (Befejezve: {})".format(self.team, self.station, self.completed_at)
