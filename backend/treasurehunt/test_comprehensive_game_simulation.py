# test_comprehensive_game_simulation.py
"""
√Åtfog√≥ j√°t√©k szimul√°ci√≥s tesztek
Szimul√°lja a teljes j√°t√©k folyamatot a jelenlegi k√∂rnyezetben √©s be√°ll√≠t√°sokban
"""
from django.test import TestCase, Client
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase
from django.utils import timezone
from django.core.cache import cache
import json
import uuid

from .models import Game, Team, Player, Station, Challenge, GameProgress
from .services import GameStateService, ChallengeService
from .game_state_manager import GameStateManager, GameConstants


class ComprehensiveGameSimulationTest(APITestCase):
    """√Åtfog√≥ j√°t√©k szimul√°ci√≥s tesztek"""
    
    def setUp(self):
        """Teszt adatok be√°ll√≠t√°sa"""
        self.client = Client()
        cache.clear()  # Cache t√∂rl√©se
        
        # √Ållom√°sok l√©trehoz√°sa a jelenlegi j√°t√©k logik√°hoz
        self.stations = []
        for i in range(1, 7):
            phase = "separate" if i <= 4 else "together" if i == 5 else "together"
            station = Station.objects.create(
                number=i,
                name=f"√Ållom√°s {i}",
                icon="üéÉ" if i <= 2 else "üëª" if i <= 4 else "üíÄ" if i == 5 else "üßô‚Äç‚ôÄÔ∏è",
                phase=phase
            )
            self.stations.append(station)
        
        # Feladatok l√©trehoz√°sa
        self.challenges = []
        
        # K√ºl√∂n f√°zis feladatok (1-4. √°llom√°s)
        for station_num in range(1, 5):
            station = self.stations[station_num - 1]
            
            # T√∂k csapat feladat
            challenge_pumpkin = Challenge.objects.create(
                station=station,
                team_type='pumpkin',
                title=f"T√∂k csapat feladat {station_num}",
                description=f"T√∂k csapat feladat le√≠r√°sa {station_num}. √°llom√°son",
                qr_code=f"station{station_num}_pumpkin",
                help_text=f"T√∂k csapat seg√≠ts√©g {station_num}"
            )
            self.challenges.append(challenge_pumpkin)
            
            # Szellem csapat feladat
            challenge_ghost = Challenge.objects.create(
                station=station,
                team_type='ghost',
                title=f"Szellem csapat feladat {station_num}",
                description=f"Szellem csapat feladat le√≠r√°sa {station_num}. √°llom√°son",
                qr_code=f"station{station_num}_ghost",
                help_text=f"Szellem csapat seg√≠ts√©g {station_num}"
            )
            self.challenges.append(challenge_ghost)
        
        # K√∂z√∂s f√°zis feladatok (5-6. √°llom√°s)
        for station_num in range(5, 7):
            station = self.stations[station_num - 1]
            
            challenge_together = Challenge.objects.create(
                station=station,
                team_type=None,  # K√∂z√∂s feladat
                title=f"K√∂z√∂s feladat {station_num}",
                description=f"K√∂z√∂s feladat le√≠r√°sa {station_num}. √°llom√°son",
                qr_code=f"station{station_num}_together",
                help_text=f"K√∂z√∂s seg√≠ts√©g {station_num}"
            )
            self.challenges.append(challenge_together)
    
    def test_complete_two_team_game_simulation(self):
        """Teljes 2 csapatos j√°t√©k szimul√°ci√≥ja"""
        print("\nüéÆ 2 CSAPATOS J√ÅT√âK SZIMUL√ÅCI√ì")
        print("=" * 50)
        
        # 1. J√°t√©k l√©trehoz√°sa
        print("1. J√°t√©k l√©trehoz√°sa...")
        game_data = {
            'name': 'Szimul√°ci√≥s Teszt J√°t√©k',
            'admin_name': 'Teszt Admin',
            'max_players': 4,
            'team_count': 2
        }
        
        response = self.client.post('/api/game/create/', game_data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        game_id = response.data['game']['id']
        game_code = response.data['game']['game_code']
        
        print(f"   ‚úÖ J√°t√©k l√©trehozva: {game_id}")
        print(f"   ‚úÖ J√°t√©k k√≥d: {game_code}")
        
        # Ellen≈ërizz√ºk a j√°t√©k √°llapot√°t
        game = Game.objects.get(id=game_id)
        self.assertEqual(game.status, 'waiting')
        self.assertEqual(game.teams.count(), 2)
        
        # 2. J√°t√©kosok csatlakoz√°sa
        print("\n2. J√°t√©kosok csatlakoz√°sa...")
        
        # T√∂k csapat j√°t√©kosok
        players_data = [
            {'name': 'T√∂k J√°t√©kos 1', 'team': 'pumpkin'},
            {'name': 'T√∂k J√°t√©kos 2', 'team': 'pumpkin'},
            {'name': 'Szellem J√°t√©kos 1', 'team': 'ghost'},
            {'name': 'Szellem J√°t√©kos 2', 'team': 'ghost'}
        ]
        
        player_tokens = []
        for player_data in players_data:
            response = self.client.post(f'/api/game/{game_id}/join/', player_data)
            self.assertEqual(response.status_code, status.HTTP_201_CREATED)
            player_tokens.append(response.data['session_token'])
            print(f"   ‚úÖ {player_data['name']} csatlakozott a {player_data['team']} csapathoz")
        
        # Ellen≈ërizz√ºk, hogy minden j√°t√©kos csatlakozott
        self.assertEqual(Player.objects.filter(team__game=game, is_active=True).count(), 4)
        
        # 3. J√°t√©k ind√≠t√°sa
        print("\n3. J√°t√©k ind√≠t√°sa...")
        response = self.client.post(f'/api/game/{game_id}/start/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        game.refresh_from_db()
        self.assertEqual(game.status, 'separate')
        print("   ‚úÖ J√°t√©k elindult - separate f√°zis")
        
        # 4. K√ºl√∂n f√°zis szimul√°ci√≥ja
        print("\n4. K√ºl√∂n f√°zis szimul√°ci√≥ja...")
        
        # T√∂k csapat halad√°sa
        print("   üéÉ T√∂k csapat halad√°sa:")
        for station_num in range(1, 5):
            # Aktu√°lis feladat lek√©rdez√©se
            response = self.client.get(f'/api/game/{game_id}/team/pumpkin/challenge/')
            self.assertEqual(response.status_code, status.HTTP_200_OK)
            challenge_data = response.data
            print(f"      √Ållom√°s {station_num}: {challenge_data['challenge']['title']}")
            
            # QR k√≥d valid√°l√°sa
            qr_data = {'qr_code': f'station{station_num}_pumpkin'}
            response = self.client.post(f'/api/game/{game_id}/team/pumpkin/validate/', qr_data)
            self.assertEqual(response.status_code, status.HTTP_200_OK)
            self.assertTrue(response.data['success'])
            print(f"      ‚úÖ QR k√≥d valid√°lva: {qr_data['qr_code']}")
            
            # Csapat √°llapot ellen≈ërz√©se
            pumpkin_team = Team.objects.get(game=game, name='pumpkin')
            self.assertEqual(pumpkin_team.current_station, station_num + 1)
        
        # Szellem csapat halad√°sa
        print("   üëª Szellem csapat halad√°sa:")
        for station_num in range(1, 5):
            # Aktu√°lis feladat lek√©rdez√©se
            response = self.client.get(f'/api/game/{game_id}/team/ghost/challenge/')
            self.assertEqual(response.status_code, status.HTTP_200_OK)
            challenge_data = response.data
            print(f"      √Ållom√°s {station_num}: {challenge_data['challenge']['title']}")
            
            # QR k√≥d valid√°l√°sa
            qr_data = {'qr_code': f'station{station_num}_ghost'}
            response = self.client.post(f'/api/game/{game_id}/team/ghost/validate/', qr_data)
            self.assertEqual(response.status_code, status.HTTP_200_OK)
            self.assertTrue(response.data['success'])
            print(f"      ‚úÖ QR k√≥d valid√°lva: {qr_data['qr_code']}")
            
            # Csapat √°llapot ellen≈ërz√©se
            ghost_team = Team.objects.get(game=game, name='ghost')
            self.assertEqual(ghost_team.current_station, station_num + 1)
        
        # 5. Tal√°lkoz√°si pont el√©r√©se
        print("\n5. Tal√°lkoz√°si pont el√©r√©se...")
        
        # Mindk√©t csapat el√©ri a 5. √°llom√°st (tal√°lkoz√°si pont)
        pumpkin_team = Team.objects.get(game=game, name='pumpkin')
        ghost_team = Team.objects.get(game=game, name='ghost')
        
        pumpkin_team.current_station = 5
        pumpkin_team.completed_at = timezone.now()
        pumpkin_team.save()
        
        ghost_team.current_station = 5
        ghost_team.completed_at = timezone.now()
        ghost_team.save()
        
        print("   ‚úÖ Mindk√©t csapat el√©rte a tal√°lkoz√°si pontot")
        
        # 6. K√∂z√∂s f√°zisra v√°lt√°s
        print("\n6. K√∂z√∂s f√°zisra v√°lt√°s...")
        
        # GameStateManager haszn√°lata a k√∂z√∂s f√°zisra v√°lt√°shoz
        game_manager = GameStateManager(game)
        game_manager._transition_to_together_phase()
        
        game.refresh_from_db()
        self.assertEqual(game.status, 'together')
        print("   ‚úÖ J√°t√©k √°tv√°ltott a k√∂z√∂s f√°zisba")
        
        # 7. K√∂z√∂s f√°zis szimul√°ci√≥ja
        print("\n7. K√∂z√∂s f√°zis szimul√°ci√≥ja...")
        
        # K√∂z√∂s feladatok megold√°sa
        for station_num in range(6, 7):  # 6. √°llom√°s
            # Aktu√°lis feladat lek√©rdez√©se
            response = self.client.get(f'/api/game/{game_id}/team/pumpkin/challenge/')
            self.assertEqual(response.status_code, status.HTTP_200_OK)
            challenge_data = response.data
            print(f"   K√∂z√∂s feladat {station_num}: {challenge_data['challenge']['title']}")
            
            # QR k√≥d valid√°l√°sa
            qr_data = {'qr_code': f'station{station_num}_together'}
            response = self.client.post(f'/api/game/{game_id}/team/pumpkin/validate/', qr_data)
            self.assertEqual(response.status_code, status.HTTP_200_OK)
            self.assertTrue(response.data['success'])
            print(f"   ‚úÖ K√∂z√∂s QR k√≥d valid√°lva: {qr_data['qr_code']}")
        
        # 8. J√°t√©k befejez√©se ellen≈ërz√©se
        print("\n8. J√°t√©k befejez√©se ellen≈ërz√©se...")
        
        # A j√°t√©k m√°r automatikusan befejez≈ëd√∂tt, ellen≈ërizz√ºk az √°llapotot
        game.refresh_from_db()
        self.assertEqual(game.status, 'finished')
        print("   ‚úÖ J√°t√©k automatikusan befejez≈ëd√∂tt")
        
        # Pr√≥b√°ljuk meg le√°ll√≠tani a m√°r befejezett j√°t√©kot (400 hib√°t kell adnia)
        response = self.client.post(f'/api/game/{game_id}/stop/')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        print("   ‚úÖ Befejezett j√°t√©k le√°ll√≠t√°sa helyesen 400 hib√°t ad")
        
        print("\nüéâ 2 CSAPATOS J√ÅT√âK SZIMUL√ÅCI√ì SIKERES!")
        print("=" * 50)
    
    def test_single_team_game_simulation(self):
        """1 csapatos j√°t√©k szimul√°ci√≥ja"""
        print("\nüéÆ 1 CSAPATOS J√ÅT√âK SZIMUL√ÅCI√ì")
        print("=" * 50)
        
        # 1. J√°t√©k l√©trehoz√°sa
        print("1. J√°t√©k l√©trehoz√°sa...")
        game_data = {
            'name': 'Egy Csapatos Teszt J√°t√©k',
            'admin_name': 'Teszt Admin',
            'max_players': 3,
            'team_count': 1
        }
        
        response = self.client.post('/api/game/create/', game_data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        game_id = response.data['game']['id']
        game_code = response.data['game']['game_code']
        
        print(f"   ‚úÖ J√°t√©k l√©trehozva: {game_id}")
        print(f"   ‚úÖ J√°t√©k k√≥d: {game_code}")
        
        # Ellen≈ërizz√ºk a j√°t√©k √°llapot√°t
        game = Game.objects.get(id=game_id)
        self.assertEqual(game.status, 'waiting')
        self.assertEqual(game.teams.count(), 1)
        
        # 2. J√°t√©kosok csatlakoz√°sa
        print("\n2. J√°t√©kosok csatlakoz√°sa...")
        
        players_data = [
            {'name': 'J√°t√©kos 1', 'team': 'pumpkin'},
            {'name': 'J√°t√©kos 2', 'team': 'pumpkin'},
            {'name': 'J√°t√©kos 3', 'team': 'pumpkin'}
        ]
        
        for player_data in players_data:
            response = self.client.post(f'/api/game/{game_id}/join/', player_data)
            self.assertEqual(response.status_code, status.HTTP_201_CREATED)
            print(f"   ‚úÖ {player_data['name']} csatlakozott")
        
        # 3. J√°t√©k ind√≠t√°sa
        print("\n3. J√°t√©k ind√≠t√°sa...")
        response = self.client.post(f'/api/game/{game_id}/start/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        game.refresh_from_db()
        self.assertEqual(game.status, 'separate')
        print("   ‚úÖ J√°t√©k elindult - separate f√°zis")
        
        # 4. J√°t√©k folyamat szimul√°ci√≥ja
        print("\n4. J√°t√©k folyamat szimul√°ci√≥ja...")
        
        # Csapat halad√°sa
        for station_num in range(1, 5):
            # Aktu√°lis feladat lek√©rdez√©se
            response = self.client.get(f'/api/game/{game_id}/team/pumpkin/challenge/')
            self.assertEqual(response.status_code, status.HTTP_200_OK)
            challenge_data = response.data
            print(f"   √Ållom√°s {station_num}: {challenge_data['challenge']['title']}")
            
            # QR k√≥d valid√°l√°sa
            qr_data = {'qr_code': f'station{station_num}_pumpkin'}
            response = self.client.post(f'/api/game/{game_id}/team/pumpkin/validate/', qr_data)
            self.assertEqual(response.status_code, status.HTTP_200_OK)
            self.assertTrue(response.data['success'])
            print(f"   ‚úÖ QR k√≥d valid√°lva: {qr_data['qr_code']}")
        
        print("\nüéâ 1 CSAPATOS J√ÅT√âK SZIMUL√ÅCI√ì SIKERES!")
        print("=" * 50)
    
    def test_game_code_search_simulation(self):
        """J√°t√©k k√≥d keres√©s szimul√°ci√≥ja"""
        print("\nüîç J√ÅT√âK K√ìD KERES√âS SZIMUL√ÅCI√ì")
        print("=" * 50)
        
        # 1. J√°t√©k l√©trehoz√°sa
        print("1. J√°t√©k l√©trehoz√°sa...")
        game_data = {
            'name': 'Keres√©si Teszt J√°t√©k',
            'admin_name': 'Teszt Admin',
            'max_players': 4,
            'team_count': 2
        }
        
        response = self.client.post('/api/game/create/', game_data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        game_id = response.data['game']['id']
        game_code = response.data['game']['game_code']
        
        print(f"   ‚úÖ J√°t√©k l√©trehozva: {game_id}")
        print(f"   ‚úÖ J√°t√©k k√≥d: {game_code}")
        
        # 2. J√°t√©k k√≥d keres√©se
        print(f"\n2. J√°t√©k k√≥d keres√©se: {game_code}")
        response = self.client.get(f'/api/game/code/{game_code}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        found_game = response.data['game']
        self.assertEqual(found_game['id'], game_id)
        self.assertEqual(found_game['game_code'], game_code)
        print(f"   ‚úÖ J√°t√©k megtal√°lva: {found_game['name']}")
        
        # 3. Hib√°s k√≥d keres√©se
        print("\n3. Hib√°s k√≥d keres√©se...")
        response = self.client.get('/api/game/code/INVALID/')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        print("   ‚úÖ Hib√°s k√≥d eset√©n 400 hiba (valid√°ci√≥s hiba)")
        
        print("\nüéâ J√ÅT√âK K√ìD KERES√âS SZIMUL√ÅCI√ì SIKERES!")
        print("=" * 50)
    
    def test_sse_events_simulation(self):
        """SSE esem√©nyek szimul√°ci√≥ja"""
        print("\nüì° SSE ESEM√âNYEK SZIMUL√ÅCI√ìJA")
        print("=" * 50)
        
        # 1. J√°t√©k l√©trehoz√°sa
        print("1. J√°t√©k l√©trehoz√°sa...")
        game_data = {
            'name': 'SSE Teszt J√°t√©k',
            'admin_name': 'Teszt Admin',
            'max_players': 2,
            'team_count': 1
        }
        
        response = self.client.post('/api/game/create/', game_data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        game_id = response.data['game']['id']
        
        print(f"   ‚úÖ J√°t√©k l√©trehozva: {game_id}")
        
        # 2. SSE kapcsolat tesztel√©se
        print("\n2. SSE kapcsolat tesztel√©se...")
        
        # √Åltal√°nos SSE endpoint
        response = self.client.get('/api/sse/general/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        print("   ‚úÖ √Åltal√°nos SSE endpoint el√©rhet≈ë")
        
        # J√°t√©k-specifikus SSE endpoint
        response = self.client.get(f'/api/sse/game/{game_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        print(f"   ‚úÖ J√°t√©k SSE endpoint el√©rhet≈ë: {game_id}")
        
        print("\nüéâ SSE ESEM√âNYEK SZIMUL√ÅCI√ìJA SIKERES!")
        print("=" * 50)
    
    def test_error_handling_simulation(self):
        """Hibakezel√©s szimul√°ci√≥ja"""
        print("\n‚ùå HIB√ÅKEZEL√âS SZIMUL√ÅCI√ìJA")
        print("=" * 50)
        
        # 1. Hib√°s j√°t√©k k√≥d
        print("1. Hib√°s j√°t√©k k√≥d tesztel√©se...")
        response = self.client.get('/api/game/code/NONEXISTENT/')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        print("   ‚úÖ Hib√°s j√°t√©k k√≥d eset√©n 400 hiba (valid√°ci√≥s hiba)")
        
        # 2. Hib√°s QR k√≥d
        print("\n2. Hib√°s QR k√≥d tesztel√©se...")
        game = Game.objects.create(
            name="Hibakezel√©si Teszt",
            max_players=2,
            team_count=1
        )
        team = Team.objects.create(game=game, name='pumpkin', max_players=2)
        
        # J√°t√©k ind√≠t√°sa, hogy legyen feladat
        game.status = 'separate'
        game.save()
        
        qr_data = {'qr_code': 'invalid_qr_code'}
        response = self.client.post(f'/api/game/{game.id}/team/pumpkin/validate/', qr_data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertFalse(response.data['success'])
        print("   ‚úÖ Hib√°s QR k√≥d eset√©n 200 hiba (helyes)")
        
        # 3. Teli csapat
        print("\n3. Teli csapat tesztel√©se...")
        
        # J√°t√©kosok hozz√°ad√°sa a csapathoz
        for i in range(2):
            Player.objects.create(
                name=f"J√°t√©kos {i+1}",
                team=team
            )
        
        # Harmadik j√°t√©kos pr√≥b√°lkoz√°sa
        player_data = {'name': 'J√°t√©kos 3', 'team': 'pumpkin'}
        response = self.client.post(f'/api/game/{game.id}/join/', player_data)
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        print("   ‚úÖ Teli csapat eset√©n 400 hiba")
        
        print("\nüéâ HIB√ÅKEZEL√âS SZIMUL√ÅCI√ìJA SIKERES!")
        print("=" * 50)
    
    def test_admin_operations_simulation(self):
        """Admin m≈±veletek szimul√°ci√≥ja"""
        print("\nüõ†Ô∏è ADMIN M≈∞VELETEK SZIMUL√ÅCI√ìJA")
        print("=" * 50)
        
        # 1. J√°t√©k l√©trehoz√°sa
        print("1. J√°t√©k l√©trehoz√°sa...")
        game_data = {
            'name': 'Admin Teszt J√°t√©k',
            'admin_name': 'Teszt Admin',
            'max_players': 4,
            'team_count': 2
        }
        
        response = self.client.post('/api/game/create/', game_data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        game_id = response.data['game']['id']
        
        print(f"   ‚úÖ J√°t√©k l√©trehozva: {game_id}")
        
        # 2. J√°t√©kok list√°z√°sa
        print("\n2. J√°t√©kok list√°z√°sa...")
        response = self.client.get('/api/admin/games/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        games = response.data['games']
        self.assertEqual(len(games), 1)
        print(f"   ‚úÖ {len(games)} j√°t√©k list√°zva")
        
        # 3. J√°t√©kos hozz√°ad√°sa
        print("\n3. J√°t√©kos hozz√°ad√°sa...")
        player_data = {
            'name': 'Admin J√°t√©kos',
            'team': 'pumpkin'
        }
        response = self.client.post(f'/api/game/{game_id}/player/add/', player_data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        player_id = response.data['player']['id']
        print(f"   ‚úÖ J√°t√©kos hozz√°adva: {player_id}")
        
        # 4. J√°t√©kos √°thelyez√©se
        print("\n4. J√°t√©kos √°thelyez√©se...")
        move_data = {'new_team': 'ghost'}
        response = self.client.post(f'/api/game/{game_id}/player/{player_id}/move/', move_data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        print("   ‚úÖ J√°t√©kos √°thelyezve")
        
        # 5. J√°t√©kos elt√°vol√≠t√°sa
        print("\n5. J√°t√©kos elt√°vol√≠t√°sa...")
        response = self.client.delete(f'/api/game/{game_id}/player/{player_id}/remove/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        print("   ‚úÖ J√°t√©kos elt√°vol√≠tva")
        
        # 6. J√°t√©k t√∂rl√©se
        print("\n6. J√°t√©k t√∂rl√©se...")
        response = self.client.delete(f'/api/game/{game_id}/delete/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        print("   ‚úÖ J√°t√©k t√∂r√∂lve")
        
        print("\nüéâ ADMIN M≈∞VELETEK SZIMUL√ÅCI√ìJA SIKERES!")
        print("=" * 50)


class GameStateTransitionTest(APITestCase):
    """J√°t√©k √°llapot v√°lt√°sok tesztel√©se"""
    
    def setUp(self):
        """Teszt adatok be√°ll√≠t√°sa"""
        self.client = Client()
        cache.clear()
    
    def test_game_state_transitions(self):
        """J√°t√©k √°llapot v√°lt√°sok tesztel√©se"""
        print("\nüîÑ J√ÅT√âK √ÅLLAPOT V√ÅLT√ÅSOK TESZTEL√âSE")
        print("=" * 50)
        
        # 1. J√°t√©k l√©trehoz√°sa
        print("1. J√°t√©k l√©trehoz√°sa...")
        game_data = {
            'name': '√Ållapot Teszt J√°t√©k',
            'admin_name': 'Teszt Admin',
            'max_players': 2,
            'team_count': 1
        }
        
        response = self.client.post('/api/game/create/', game_data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        game_id = response.data['game']['id']
        
        game = Game.objects.get(id=game_id)
        self.assertEqual(game.status, 'waiting')
        print(f"   ‚úÖ J√°t√©k l√©trehozva - √°llapot: {game.status}")
        
        # 2. J√°t√©kos hozz√°ad√°sa
        print("\n2. J√°t√©kos hozz√°ad√°sa...")
        player_data = {'name': 'Teszt J√°t√©kos', 'team': 'pumpkin'}
        response = self.client.post(f'/api/game/{game_id}/join/', player_data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        print("   ‚úÖ J√°t√©kos hozz√°adva")
        
        # 3. J√°t√©k ind√≠t√°sa
        print("\n3. J√°t√©k ind√≠t√°sa...")
        response = self.client.post(f'/api/game/{game_id}/start/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        game.refresh_from_db()
        self.assertEqual(game.status, 'separate')
        print(f"   ‚úÖ J√°t√©k elindult - √°llapot: {game.status}")
        
        # 4. J√°t√©k le√°ll√≠t√°sa
        print("\n4. J√°t√©k le√°ll√≠t√°sa...")
        response = self.client.post(f'/api/game/{game_id}/stop/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        game.refresh_from_db()
        self.assertEqual(game.status, 'finished')
        print(f"   ‚úÖ J√°t√©k le√°ll√≠tva - √°llapot: {game.status}")
        
        # 5. J√°t√©k vissza√°ll√≠t√°sa
        print("\n5. J√°t√©k vissza√°ll√≠t√°sa...")
        response = self.client.delete(f'/api/game/{game_id}/reset/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        game.refresh_from_db()
        self.assertEqual(game.status, 'waiting')
        print(f"   ‚úÖ J√°t√©k vissza√°ll√≠tva - √°llapot: {game.status}")
        
        print("\nüéâ J√ÅT√âK √ÅLLAPOT V√ÅLT√ÅSOK TESZTEL√âSE SIKERES!")
        print("=" * 50)


class PerformanceTest(APITestCase):
    """Teljes√≠tm√©ny tesztek"""
    
    def setUp(self):
        """Teszt adatok be√°ll√≠t√°sa"""
        self.client = Client()
        cache.clear()
    
    def test_concurrent_game_creation(self):
        """P√°rhuzamos j√°t√©k l√©trehoz√°s tesztel√©se"""
        print("\n‚ö° P√ÅRHUZAMOS J√ÅT√âK L√âTREHOZ√ÅS TESZTEL√âSE")
        print("=" * 50)
        
        # 5 j√°t√©k l√©trehoz√°sa p√°rhuzamosan
        games_data = []
        for i in range(5):
            games_data.append({
                'name': f'P√°rhuzamos J√°t√©k {i+1}',
                'admin_name': f'Admin {i+1}',
                'max_players': 4,
                'team_count': 2
            })
        
        print(f"1. {len(games_data)} j√°t√©k l√©trehoz√°sa...")
        
        created_games = []
        for i, game_data in enumerate(games_data):
            response = self.client.post('/api/game/create/', game_data)
            self.assertEqual(response.status_code, status.HTTP_201_CREATED)
            created_games.append(response.data['game']['id'])
            print(f"   ‚úÖ J√°t√©k {i+1} l√©trehozva")
        
        # Ellen≈ërizz√ºk, hogy minden j√°t√©k l√©trej√∂tt
        self.assertEqual(Game.objects.count(), 5)
        print(f"   ‚úÖ √ñsszesen {Game.objects.count()} j√°t√©k l√©trehozva")
        
        print("\nüéâ P√ÅRHUZAMOS J√ÅT√âK L√âTREHOZ√ÅS TESZTEL√âSE SIKERES!")
        print("=" * 50)
    
    def test_large_game_simulation(self):
        """Nagy j√°t√©k szimul√°ci√≥ja (8 j√°t√©kos, 2 csapat)"""
        print("\n‚ö° NAGY J√ÅT√âK SZIMUL√ÅCI√ìJA")
        print("=" * 50)
        
        # 1. Nagy j√°t√©k l√©trehoz√°sa
        print("1. Nagy j√°t√©k l√©trehoz√°sa (8 j√°t√©kos, 2 csapat)...")
        game_data = {
            'name': 'Nagy Teszt J√°t√©k',
            'admin_name': 'Teszt Admin',
            'max_players': 8,
            'team_count': 2
        }
        
        response = self.client.post('/api/game/create/', game_data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        game_id = response.data['game']['id']
        
        print(f"   ‚úÖ Nagy j√°t√©k l√©trehozva: {game_id}")
        
        # 2. 8 j√°t√©kos csatlakoztat√°sa
        print("\n2. 8 j√°t√©kos csatlakoztat√°sa...")
        
        for i in range(8):
            team_name = 'pumpkin' if i < 4 else 'ghost'
            player_data = {
                'name': f'Nagy J√°t√©kos {i+1}',
                'team': team_name
            }
            response = self.client.post(f'/api/game/{game_id}/join/', player_data)
            self.assertEqual(response.status_code, status.HTTP_201_CREATED)
            print(f"   ‚úÖ {player_data['name']} csatlakozott a {team_name} csapathoz")
        
        # Ellen≈ërizz√ºk a j√°t√©kosok sz√°m√°t
        game = Game.objects.get(id=game_id)
        self.assertEqual(Player.objects.filter(team__game=game, is_active=True).count(), 8)
        print(f"   ‚úÖ √ñsszesen {Player.objects.filter(team__game=game, is_active=True).count()} j√°t√©kos csatlakozott")
        
        # 3. J√°t√©k ind√≠t√°sa
        print("\n3. J√°t√©k ind√≠t√°sa...")
        response = self.client.post(f'/api/game/{game_id}/start/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        game.refresh_from_db()
        self.assertEqual(game.status, 'separate')
        print("   ‚úÖ Nagy j√°t√©k elindult")
        
        print("\nüéâ NAGY J√ÅT√âK SZIMUL√ÅCI√ìJA SIKERES!")
        print("=" * 50)
