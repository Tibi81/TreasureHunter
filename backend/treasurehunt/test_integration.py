# test_integration.py
from django.test import TestCase, Client
from django.urls import reverse
from django.utils import timezone
from rest_framework import status
from rest_framework.test import APITestCase
import json

from .models import Game, Team, Player, Station, Challenge, GameProgress
from .services import GameStateService
from .session_token_services import SessionTokenService


class GameFlowIntegrationTest(APITestCase):
    """Teljes j√°t√©k folyamat integr√°ci√≥s tesztek"""
    
    def setUp(self):
        """Teszt adatok be√°ll√≠t√°sa"""
        self.client = Client()
        
        # √Ållom√°sok l√©trehoz√°sa
        self.station1 = Station.objects.create(
            number=1,
            name="Kezd≈ë √°llom√°s",
            icon="üéÉ",
            phase="separate"
        )
        self.station2 = Station.objects.create(
            number=2,
            name="M√°sodik √°llom√°s",
            icon="üëª",
            phase="separate"
        )
        self.station3 = Station.objects.create(
            number=3,
            name="Harmadik √°llom√°s",
            icon="üé≠",
            phase="separate"
        )
        self.station5 = Station.objects.create(
            number=5,
            name="Tal√°lkoz√°si pont",
            icon="üíÄ",
            phase="together"
        )
        self.station6 = Station.objects.create(
            number=6,
            name="V√©gs≈ë √°llom√°s",
            icon="üßô‚Äç‚ôÄÔ∏è",
            phase="together"
        )
        
        # Feladatok l√©trehoz√°sa
        self.challenge1_pumpkin = Challenge.objects.create(
            station=self.station1,
            team_type='pumpkin',
            title="T√∂k csapat feladat 1",
            description="Els≈ë feladat a t√∂k csapatnak",
            qr_code="station1_pumpkin",
            help_text="Seg√≠ts√©g 1"
        )
        self.challenge1_ghost = Challenge.objects.create(
            station=self.station1,
            team_type='ghost',
            title="Szellem csapat feladat 1",
            description="Els≈ë feladat a szellem csapatnak",
            qr_code="station1_ghost",
            help_text="Seg√≠ts√©g 1"
        )
        self.challenge2_pumpkin = Challenge.objects.create(
            station=self.station2,
            team_type='pumpkin',
            title="T√∂k csapat feladat 2",
            description="M√°sodik feladat a t√∂k csapatnak",
            qr_code="station2_pumpkin",
            help_text="Seg√≠ts√©g 2"
        )
        self.challenge2_ghost = Challenge.objects.create(
            station=self.station2,
            team_type='ghost',
            title="Szellem csapat feladat 2",
            description="M√°sodik feladat a szellem csapatnak",
            qr_code="station2_ghost",
            help_text="Seg√≠ts√©g 2"
        )
        self.challenge3_pumpkin = Challenge.objects.create(
            station=self.station3,
            team_type='pumpkin',
            title="T√∂k csapat feladat 3",
            description="Harmadik feladat a t√∂k csapatnak",
            qr_code="station3_pumpkin",
            help_text="Seg√≠ts√©g 3"
        )
        self.challenge3_ghost = Challenge.objects.create(
            station=self.station3,
            team_type='ghost',
            title="Szellem csapat feladat 3",
            description="Harmadik feladat a szellem csapatnak",
            qr_code="station3_ghost",
            help_text="Seg√≠ts√©g 3"
        )
        self.challenge5_together = Challenge.objects.create(
            station=self.station5,
            team_type=None,
            title="K√∂z√∂s feladat 1",
            description="Els≈ë k√∂z√∂s feladat",
            qr_code="station5_together",
            help_text="K√∂z√∂s seg√≠ts√©g 1"
        )
        self.challenge6_together = Challenge.objects.create(
            station=self.station6,
            team_type=None,
            title="K√∂z√∂s feladat 2",
            description="M√°sodik k√∂z√∂s feladat",
            qr_code="station6_together",
            help_text="K√∂z√∂s seg√≠ts√©g 2"
        )
    
    def test_complete_game_flow_two_teams(self):
        """Teljes j√°t√©k folyamat tesztel√©se 2 csapatos j√°t√©kban"""
        # 1. J√°t√©k l√©trehoz√°sa
        game_data = {
            'name': 'Integration Test Game',
            'max_players': 4,
            'team_count': 2,
            'admin_name': 'Test Admin'
        }
        
        response = self.client.post('/api/game/create/', game_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        game_id = response.data['game']['id']
        
        # Ellen≈ërizz√ºk, hogy a csapatok l√©trej√∂ttek
        game = Game.objects.get(id=game_id)
        self.assertEqual(game.teams.count(), 2)
        
        pumpkin_team = game.teams.get(name='pumpkin')
        ghost_team = game.teams.get(name='ghost')
        
        # 2. J√°t√©kosok csatlakoz√°sa
        # T√∂k csapat j√°t√©kosok
        player1_data = {'name': 'Player 1', 'team': 'pumpkin'}
        response = self.client.post(f'/api/game/{game_id}/join/', player1_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        player1_token = response.data['session_token']
        
        player2_data = {'name': 'Player 2', 'team': 'pumpkin'}
        response = self.client.post(f'/api/game/{game_id}/join/', player2_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        player2_token = response.data['session_token']
        
        # Szellem csapat j√°t√©kosok
        player3_data = {'name': 'Player 3', 'team': 'ghost'}
        response = self.client.post(f'/api/game/{game_id}/join/', player3_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        player3_token = response.data['session_token']
        
        player4_data = {'name': 'Player 4', 'team': 'ghost'}
        response = self.client.post(f'/api/game/{game_id}/join/', player4_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        player4_token = response.data['session_token']
        
        # Ellen≈ërizz√ºk, hogy minden j√°t√©kos csatlakozott
        self.assertEqual(Player.objects.filter(team__game=game).count(), 4)
        
        # 3. J√°t√©k ind√≠t√°sa
        response = self.client.post(f'/api/game/{game_id}/start/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        game.refresh_from_db()
        self.assertEqual(game.status, 'separate')
        
        # 4. K√ºl√∂n f√°zis - T√∂k csapat feladat megold√°sa
        # Aktu√°lis feladat lek√©rdez√©se
        response = self.client.get(f'/api/game/{game_id}/team/pumpkin/challenge/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['challenge']['title'], 'T√∂k csapat feladat 1')
        
        # QR k√≥d valid√°l√°sa
        qr_data = {'qr_code': 'station1_pumpkin'}
        response = self.client.post(f'/api/game/{game_id}/team/pumpkin/validate/', qr_data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertTrue(response.data['success'])
        
        # Ellen≈ërizz√ºk, hogy a csapat el≈ërehaladt
        pumpkin_team.refresh_from_db()
        self.assertEqual(pumpkin_team.current_station, 2)
        
        # 5. K√ºl√∂n f√°zis - Szellem csapat feladat megold√°sa
        response = self.client.get(f'/api/game/{game_id}/team/ghost/challenge/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['challenge']['title'], 'Szellem csapat feladat 1')
        
        qr_data = {'qr_code': 'station1_ghost'}
        response = self.client.post(f'/api/game/{game_id}/team/ghost/validate/', qr_data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertTrue(response.data['success'])
        
        ghost_team.refresh_from_db()
        self.assertEqual(ghost_team.current_station, 2)
        
        # 6. M√°sodik √°llom√°s - mindk√©t csapat
        # T√∂k csapat
        qr_data = {'qr_code': 'station2_pumpkin'}
        response = self.client.post(f'/api/game/{game_id}/team/pumpkin/validate/', qr_data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # Szellem csapat
        qr_data = {'qr_code': 'station2_ghost'}
        response = self.client.post(f'/api/game/{game_id}/team/ghost/validate/', qr_data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 7. K√∂z√∂s f√°zis - A csapatokat a 6-os √°llom√°sra √°ll√≠tjuk (together f√°zis)
        # Manu√°lisan √°ll√≠tjuk a csapatokat a 6-os √°llom√°sra, hogy together f√°zisba ker√ºljenek
        pumpkin_team.current_station = 6
        pumpkin_team.completed_at = timezone.now()
        pumpkin_team.save()
        
        ghost_team.current_station = 6
        ghost_team.completed_at = timezone.now()
        ghost_team.save()
        
        # J√°t√©k √°llapot v√°lt√°s k√∂z√∂s f√°zisra
        game.status = 'together'
        game.save()
        
        # 8. K√∂z√∂s f√°zis feladat megold√°sa - a csapatok m√°r a 6-os √°llom√°son vannak (together f√°zis)
        game.refresh_from_db()
        pumpkin_team.refresh_from_db()
        
        response = self.client.get(f'/api/game/{game_id}/team/pumpkin/challenge/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        # A csapatok m√°r a 6-os √°llom√°son vannak, teh√°t 'K√∂z√∂s feladat 2' jelenik meg
        self.assertEqual(response.data['challenge']['title'], 'K√∂z√∂s feladat 2')
        
        # Valid√°ljuk a 6-os √°llom√°st
        qr_data = {'qr_code': 'station6_together'}
        response = self.client.post(f'/api/game/{game_id}/team/pumpkin/validate/', qr_data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 10. J√°t√©k befejez√©se ellen≈ërz√©se
        # A j√°t√©k m√°r automatikusan befejez≈ëd√∂tt, ellen≈ërizz√ºk az √°llapotot
        game.refresh_from_db()
        self.assertEqual(game.status, 'finished')
        print("   ‚úÖ J√°t√©k automatikusan befejez≈ëd√∂tt")
        
        # Pr√≥b√°ljuk meg le√°ll√≠tani a m√°r befejezett j√°t√©kot (400 hib√°t kell adnia)
        response = self.client.post(f'/api/game/{game_id}/stop/')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('Csak fut√≥ j√°t√©kokat lehet le√°ll√≠tani', response.data['error'])
        print("   ‚úÖ Befejezett j√°t√©k le√°ll√≠t√°sa 400 hib√°t ad (helyes)")
    
    def test_single_team_game_flow(self):
        """Egy csapatos j√°t√©k folyamat tesztel√©se"""
        # 1. Egy csapatos j√°t√©k l√©trehoz√°sa
        game_data = {
            'name': 'Single Team Game',
            'max_players': 3,
            'team_count': 1,
            'admin_name': 'Test Admin'
        }
        
        response = self.client.post('/api/game/create/', game_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        game_id = response.data['game']['id']
        
        # Ellen≈ërizz√ºk, hogy csak egy csapat j√∂tt l√©tre
        game = Game.objects.get(id=game_id)
        self.assertEqual(game.teams.count(), 1)
        
        main_team = game.teams.get(name='pumpkin')  # 1 csapatos j√°t√©kn√°l is 'pumpkin' a csapat neve
        
        # 2. J√°t√©kosok csatlakoz√°sa
        for i in range(3):
            player_data = {
                'name': f'Player {i+1}',
                'team': 'pumpkin'
            }
            response = self.client.post(f'/api/game/{game_id}/join/', player_data, format='json')
            self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. J√°t√©k ind√≠t√°sa
        response = self.client.post(f'/api/game/{game_id}/start/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        game.refresh_from_db()
        self.assertEqual(game.status, 'separate')  # Egy csapatos j√°t√©k is separate f√°zisban kezd, azt√°n together-re v√°lt
    
    def test_player_session_management(self):
        """J√°t√©kos session kezel√©s tesztel√©se"""
        # J√°t√©k l√©trehoz√°sa
        game = Game.objects.create(
            name="Session Test Game",
            max_players=2,
            team_count=1
        )
        team = Team.objects.create(game=game, name='pumpkin', max_players=2)
        
        # J√°t√©kos csatlakoz√°sa
        player_data = {'name': 'Session Player', 'team': 'pumpkin'}
        response = self.client.post(f'/api/game/{game.id}/join/', player_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        player_token = response.data['session_token']
        player_id = response.data['id']
        
        # Session ellen≈ërz√©se
        response = self.client.get('/api/player/status/', {'token': player_token})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['current_player']['name'], 'Session Player')
        
        # J√°t√©kos kil√©p√©se (sz√ºneteltet√©s)
        response = self.client.post('/api/player/exit/', {'token': player_token})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        player = Player.objects.get(id=player_id)
        self.assertFalse(player.is_active)
        
        # Session vissza√°ll√≠t√°sa
        response = self.client.post('/api/player/restore-session/', {'session_token': player_token})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        player.refresh_from_db()
        self.assertTrue(player.is_active)
        
        # V√©gleges kijelentkez√©s
        response = self.client.post('/api/player/logout/', {'token': player_token})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # Ellen≈ërizz√ºk, hogy a j√°t√©kos t√∂rl≈ëd√∂tt
        self.assertFalse(Player.objects.filter(id=player_id).exists())
    
    def test_help_system(self):
        """Seg√≠ts√©g rendszer tesztel√©se"""
        # J√°t√©k l√©trehoz√°sa
        game = Game.objects.create(
            name="Help Test Game",
            max_players=2,
            team_count=1
        )
        team = Team.objects.create(game=game, name='pumpkin', max_players=2)
        
        # J√°t√©kos csatlakoz√°sa
        player_data = {'name': 'Help Player', 'team': 'pumpkin'}
        response = self.client.post(f'/api/game/{game.id}/join/', player_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # J√°t√©k ind√≠t√°sa (hogy legyen √°llom√°s √©s feladat)
        Player.objects.create(team=team, name='Player 2')  # M√©g egy j√°t√©kos, hogy ind√≠that√≥ legyen
        response = self.client.post(f'/api/game/{game.id}/start/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # Seg√≠ts√©g k√©r√©se - az 1. √°llom√°shoz van challenge (a setUp-ban l√©trehozva)
        response = self.client.post(f'/api/game/{game.id}/team/pumpkin/help/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['help_text'], 'Seg√≠ts√©g 1')  # challenge1_pumpkin help_text-je
    
    def test_error_handling(self):
        """Hibakezel√©s tesztel√©se"""
        # √ârv√©nytelen j√°t√©k k√≥d
        response = self.client.get('/api/game/code/INVALID/')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)  # Valid√°ci√≥s hiba
        
        # √ârv√©nytelen QR k√≥d
        game = Game.objects.create(name="Error Test Game", max_players=2, team_count=1)
        team = Team.objects.create(game=game, name='pumpkin', max_players=2)
        
        qr_data = {'qr_code': 'invalid_qr'}
        response = self.client.post(f'/api/game/{game.id}/team/pumpkin/validate/', qr_data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)  # 200 OK, de success: False
        self.assertFalse(response.data['success'])
        
        # Teli csapat
        player1_data = {'name': 'Player 1', 'team': 'pumpkin'}
        response = self.client.post(f'/api/game/{game.id}/join/', player1_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        player2_data = {'name': 'Player 2', 'team': 'pumpkin'}
        response = self.client.post(f'/api/game/{game.id}/join/', player2_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # Harmadik j√°t√©kos pr√≥b√°lkoz√°sa
        player3_data = {'name': 'Player 3', 'team': 'pumpkin'}
        response = self.client.post(f'/api/game/{game.id}/join/', player3_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)


class AdminIntegrationTest(APITestCase):
    """Admin funkci√≥k integr√°ci√≥s tesztek"""
    
    def setUp(self):
        """Teszt adatok be√°ll√≠t√°sa"""
        self.client = Client()
        self.game = Game.objects.create(
            name="Admin Test Game",
            max_players=4,
            team_count=2
        )
        self.pumpkin_team = Team.objects.create(
            game=self.game,
            name='pumpkin',
            max_players=2
        )
        self.ghost_team = Team.objects.create(
            game=self.game,
            name='ghost',
            max_players=2
        )
    
    def test_admin_game_management(self):
        """Admin j√°t√©k kezel√©s tesztel√©se"""
        # J√°t√©kok list√°z√°sa
        response = self.client.get('/api/admin/games/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data['games']), 1)
        
        # J√°t√©kos hozz√°ad√°sa
        player_data = {'name': 'Admin Player', 'team': 'pumpkin'}
        response = self.client.post(f'/api/game/{self.game.id}/player/add/', player_data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        player_id = response.data['player']['id']
        
        # J√°t√©kos √°thelyez√©se
        move_data = {'new_team': 'ghost'}
        response = self.client.post(f'/api/game/{self.game.id}/player/{player_id}/move/', move_data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # Ellen≈ërizz√ºk, hogy a j√°t√©kos √°thelyez≈ëd√∂tt
        player = Player.objects.get(id=player_id)
        self.assertEqual(player.team, self.ghost_team)
        
        # J√°t√©kos elt√°vol√≠t√°sa
        response = self.client.delete(f'/api/game/{self.game.id}/player/{player_id}/remove/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # Ellen≈ërizz√ºk, hogy a j√°t√©kos t√∂rl≈ëd√∂tt
        self.assertFalse(Player.objects.filter(id=player_id).exists())
    
    def test_game_state_transitions(self):
        """J√°t√©k √°llapot v√°lt√°sok tesztel√©se"""
        # J√°t√©kosok hozz√°ad√°sa mindk√©t csapathoz (hogy ind√≠that√≥ legyen a j√°t√©k)
        Player.objects.create(team=self.pumpkin_team, name='Player 1')
        Player.objects.create(team=self.ghost_team, name='Player 2')
        
        # J√°t√©k ind√≠t√°sa
        response = self.client.post(f'/api/game/{self.game.id}/start/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        self.game.refresh_from_db()
        self.assertEqual(self.game.status, 'separate')
        
        # J√°t√©k le√°ll√≠t√°sa
        response = self.client.post(f'/api/game/{self.game.id}/stop/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        self.game.refresh_from_db()
        self.assertEqual(self.game.status, 'finished')
        
        # J√°t√©k vissza√°ll√≠t√°sa
        response = self.client.delete(f'/api/game/{self.game.id}/reset/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        self.game.refresh_from_db()
        self.assertEqual(self.game.status, 'waiting')
